package multiply;

import maxpower.kernel.KernelBinaryOp.Add;
import maxpower.utils.TreeReduce;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class MultiplyKernel extends Kernel {

	final DFEType intType = dfeUInt(32);
	final DFEType floatType = dfeFloat(8,24);

	MultiplyKernel(KernelParameters parameters, int nMax, int vectorDepth, int C) {
		super(parameters);
		final DFEVectorType<DFEVar> vectorType = new DFEVectorType<DFEVar>(floatType, vectorDepth);

		final int addrBits = MathUtils.bitsToAddress(nMax+1);
		DFEType addrType = dfeUInt(addrBits);

		DFEVar n = io.scalarInput("n", addrType);

		// Set up counters for 2D loop
		CounterChain chain = control.count.makeCounterChain();

		//block
		DFEVar b = chain.addCounter(n, 1);
		DFEVar i = chain.addCounter(n/vectorDepth, 1);
		DFEVar j = chain.addCounter(C, 1); // x

		DFEVector<DFEVar> inVector = io.input("vectorInput", vectorType, j===0 & b === 0);
		// Read matrix input
		DFEVector<DFEVar> matrixInputVec = io.input("matrixInput", vectorType);

		Memory<DFEVector<DFEVar>> ram = mem.alloc(vectorType, nMax+1);
		ram.write(i, inVector, j===0 & b === 0);

		DFEVector<DFEVar> elFromRam = j===0 & b === 0 ? inVector : ram.read(i);


		// At the head of the loop, we select whether to take the initial value,
		// or the value that is being carried around the data flow cycle
		DFEVector<DFEVar> carriedSum = vectorType.newInstance(this);
		DFEVector<DFEVar> sum = i === 0 ? constant.vect(vectorDepth, 0.0) : carriedSum;

		DFEVector<DFEVar> newSum = matrixInputVec*elFromRam+sum;

		carriedSum <== stream.offset(newSum, -C);

		DFEVar[] summands = new DFEVar[vectorDepth];

		for(int k=0; k < vectorDepth; k++){
			summands[k] = newSum[k];
		}

		// We have a controlled output to deliver the sum at the end of each column

		io.output("output", TreeReduce.reduce(new Add<DFEVar>(), summands), floatType, i === (n/vectorDepth-1));

	}
}
